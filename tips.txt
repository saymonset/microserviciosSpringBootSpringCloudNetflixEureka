Libreria Feign. Otra forma de implementar un ciente http para la comunicacion entre microservicios. Es una alternativa a utilizar restTemplate.
Feign es desarrollada por netflix y forma pate del ecosistema springCloud.
Feign es mucho mas facil utilizando interfaces y anotaciones de forma declarativa.




Nuestro servicio producto tenga mas instancia desplegadas pero en dieferentes puertos.
Que nuestro servicio itemes pueda consumir nuestro servicio productos y pueda
seleccionar la emjor instancia disponible utilizando la libreria ribbon que es
un balanceador de carga.
La version de springboot 2.4 en adelante no es compatible con Ribbon

Seccion 3-> 23. Habilitamos los microservicos con eureka colocando la libreria Eureka Discovery Client
de Spring Cloud Discover

Seccion 3 -> 25. Tolerancia de fallos. Implementamos el patron de diseno corto circuit  que en ingles es circuit breaker.
Api Hystrix es compatible con la serie spring-boot 2.2, 2.3
Pero spring-boot 2.4 en adelante se utiliza Resiliance.

Si usamos una version mas actualizada de spring-boot, por ejemplo la 2.5 en adelante 
, en ves de utilizar ribbon, vas usar como balanceador de carga spring-cloud-load-balancer,
y en ves de usar Hytrix como tolerancia de fallos, vas a utilizar resilience4j

Seccion 3 -> 26. Configurando timeout con Hystrix y Ribbon

Ribbon que es el balanceador de carga y  Hytrix que es circuit break o metodo alternativo tiene su propias configuraciones de timeout

https://cloud.spring.io/spring-cloud-netflix/multi/multi__hystrix_timeouts_and_ribbon_clients.html

https://spring.getdocs.org/en-US/spring-cloud-docs/spring-cloud-netflix/router-and-filter-zuul/uploading-files-through-zuul.html

Aunmentamos el timeout de Hystrix que debe ser mayor  a Ribbon su timeout

#Hystrix(Camino alternativo) envuelve  a ribbon (Balanceador de carga),
# Entonces o ideal es que hystrix tenga un tiempo mayor a ribbon
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds: 13000
ribbon.ConnectTimeout: 3000
ribbon.ReadTimeout: 100000

Seccion 23 -> 26

Puerta de enlace Zuul (API GATEWAY). Que se encarga del acceso de los demas microservicios que estan registrados en eureka. Es la puerta de engrada a tod el ecoistema de mricroservicos.
Enrutamiento de carga, balnceo dinamico y un conjunto de filros que se pueden implementar
para manejo de rutas , seguridad , autorizacion, manejo de error, monitorizacion.
Zuul no es compatible con spring-boot 2.4 ni 2.5
Con 2.2, 2.3 si hay compatibilidad

Eureka Discovery Client en spring  cloud discovery.. Le decinos que sea un cliente de eureka


Seccion 4 -> 
Spring cloud gateway esta desarrollado por el equipo de spring cloud y usan programacion reactiva.

Puerta de enlace o gateway es alternativa al viejo zuul

Spring load balancer, alternativa al viejo Ribbon 

Spring Cloud Routing -> Gateway ya incluye Cloaud LoadBalancer y no es necesario aregarlo 
como dependencia..

Se trabaja con la alternativa de Hystrix y es mas nueva y es SpringCloud Circuit Breake -> Resilience4j.

SpringCloudGateway como trabaja con programacion reactiva , no es compatible con
SpringSecurity OATH2 (Solo compaible con el api servlet), SpringSecurity OATH2 (Solo compaible con el api servlet),  solo trabaja con zuul.

Es recomendable levantar Gateway al final como se hace con Zuul

Tipos de como configurar filtros en gateWay

https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#the-addrequestparameter-gatewayfilter-factory


git commit -am "Seccion 4 -> 40. Realizar predicados en el gateway request y validar antes de hacer peticiones.
https://docs.spring.io/spring-cloud-gateway/docs/current/reference/html/#gateway-request-predicates-factories"

Seccion 5 ->Resilience4j Resilencia y tolerancia a fallos que va a sustituir  por Hystrix.

Resiliance4j:  implementa el patron cortocircuit , disenada con programacion funcional y expresiones lambda java 8 , anotaciones y es una libreria para trabajar con resilencia
y tolerancia a fallos.

Recientes nuevas de springCloud version 2020.0.0 en adelante llamada o se le conoce como llford y viene de la mano spring-boot 2.4.1.

Reuerden que siempre una version de spring-cloud viene de la mano con una version de spring-boot.

Hystrix  de netflix a venido por defecto a las versiones anteriores a de la sping-cloud 2020.0.0.

Estados del patron circuitBraker.  (1)Cerrado, (2)Abierto, (3)semiabierto.

El patron cortocircuito tiene 3 estado:
1 -) Cerrado: Cuando todo sale bien. Incialmente esta en estado cerrado.
2-) Abierto : Cuando la tasa de falla supera el umbral. En este estado, las solicitudes al microservicio con fallas no se realizaran. Cuando halla pasado un cierto limite de tiempo cambiara a un estado semiabierto.
3-) Semiabierto: Se  ejecutara varias solicitudes para saber si el microservicio esta funcionando con normalidad o no. Si tiene exito, volvera al estado cerrado, si aun falla, volvera al estado abierto.





